import telebot
import time
from telebot import types
bot = telebot.TeleBot('6552168913:AAHjvxxeJ8CuLpJM4P91CvGDs3EiRbUoEpg')


def ts0():
    time.sleep(0.5)


def ts1():
    time.sleep(1)


def ts2():
    time.sleep(2)


def ts3():
    time.sleep(3)



import telebot
import sqlite3
import random
from telebot import types

# Замените 'YOUR_BOT_TOKEN' на токен вашего бота
bot = telebot.TeleBot('6552168913:AAHjvxxeJ8CuLpJM4P91CvGDs3EiRbUoEpg')
# Функция для получения случайной загадки из базы данных
def get_random_riddle():
    conn = sqlite3.connect('Загадки.db')
    cursor = conn.cursor()
    cursor.execute("SELECT загадка, ответ FROM загадки ORDER BY RANDOM() LIMIT 1")
    row = cursor.fetchone()
    conn.close()
    return row

# Создаем базу данных для отслеживания использованных загадок
used_riddles = set()

conn_used_riddles = sqlite3.connect('Used_Riddles.db')
cursor_used_riddles = conn_used_riddles.cursor()
cursor_used_riddles.execute('''CREATE TABLE IF NOT EXISTS used_riddles (riddle_id TEXT)''')
conn_used_riddles.commit()

# Создайте список с доступными загадками
all_riddles = [
    ("Моря есть — плавать нельзя, Дороги есть — ехать нельзя, Земля есть — пахать нельзя, что это?", "Карта"),
    ("Бинтами не увитый, Но вечно дамой «битый»", "Валет"),
    ("Если едешь за границу, Если знаешь ты его, Вряд ли сможешь заблудиться, Знают многие его!", "Английский язык"),
    ("У вас есть ведро с 30 литрами молока ,морковка оранжевая , сколько весит один килограмм?", "один килограмм"),
    ("За что учеников выгоняют из класса?", "За дверь"),
    ("Какое колесо не крутится при повороте?", "Запасное"),
    ("Как называется боязнь прихода Санта-Клауса?", "Клаустрафобия"),
    ("Может ли страус назвать себя птицей?", "Нет"),
    ("Как написать слово «мышеловка» пятью буквами?", "Кошка"),
    ("Подруга дней моих суровых, Голубка дряхлая моя! Одна в глуши лесов сосновых Давно, давно ты ждешь меня.Откуда этот отрывок?", "Няня"),
    ("Туда - сюда - обратно, тебе и мне приятно.", "Качели"),
    ("Мы - ребята удалые, лазим в щели половые! ", "Тараканы"),
    ("Возьму его в руки, сожму его крепко - он станет упругим и твердым как репка.", "Снежок"),
    ("Только один закон исполняется безукоризненно ", "Закон подлости"),
    ("Выше колена, пониже пупка, дырка такая, что влезет рука", "Карман"),
    ("Я громко рычу, ем грязь, и хотя я очень помогаю людям, меня толкают и волокут то туда, то сюда. Кто я такой?", "Пылесос"),
    ("Я делаю беззащитными всех людей на несколько часов каждые сутки. Я вызываю странные видения. Я забираю тебя ночью, отдаю обратно днем, никто не против моего присутствия — скорее страдают, если меня не хватает. Кто я такой?", "Сон"),
    ("Без замка, без крышкиСделан сундучок,А внутри хранитсяЗолота кусок.", "Яйцо"),
    ("Не дышит, но живёт она,Как смерть, нема и холодна;Не пьёт, хотя в воде сидит,В кольчуге, хоть и не звенит.", "Рыба"),
    ("Я рожден у пушки в дуле,  Пасть могу порвать акуле! Мне сам черт морской не брат! Я гроза судов –...", "Пират"),
    ("Как звали 1 высшую луну в клинок рассекающий демонов?", "Кокушибо"),
    ("Как называли клинки в аниме клинок рассекающий демонов?", "Ничерин"),
    ("Какую птицу дали Зеницу после финального отбора в клинок рассекающий демонов?", "Воробей"),
    ("Что будет делать мандрагора(росьение из Гарри Поттера) при раскопках?", "Орать"),
    ("Как звали хозяина Понго в мультфильме «101 далматинец»", "Джаспер"),
    ("Любит вкустный, сладкий мед,Ходит в гости круглый год,Распевает песни вслух,Добрый мишка ...", "Винни пух"),
    ("Солнце всходит и заходит,Сотни лет, веков подряд.В этом мире всё проходит,Кроме глыб, стоящих в ряд.", "Стоунхендж"),
    ("За фигуру без опаски Ем сосиски и колбаски.Пиво лучше всех варю,По-…..говорю.", "Германию"),
    ("«Крыши мира» выше нет!Называется ….", "Тибет"),
    ("Эта каменная лента Опоясала прям ваааай.Длинная стена-легенда,Как зовётся, отгадай?", "Великая китайская стена"),
    ("(МАЙНКРАФТ)Что бы волка приручить,Чем-то его нужно угостить,Нет проще уж ответа,Это ...", "Кость"),
    ("Не надо считать эту вещь обузой,Когда сражаешься с Горгоной-медузой.", "Зеркало"),
    ("Голова той медузы - трофей у Персея. Мифологию знаешь? Ответ дай скорее.", "Медуза Гаргона"),
    ("Вьет гнездо себе она тоже,И живет там почти пятьсот лет,Знаешь ты о такой или нет? В огне погибает, но этим гордится,Что снова из пепла смогла возродиться", "Феникс"),
    ("Бой с Горгоной был жестоким Обезглавлена Медуза Конь родился у истока Древний миф - любимец музы ", "Пегас"),
    ("Очень странное то чувство, Но без него на сердце пусто. Будто стынет в венах кровь, Ну конечно, это же", "Любовь"),
    ("Колокольня рассердилась На неправильный проект И немного накренилась, Чтоб произвести эффект.", "Пизанская Башня"),
    ("Есть пропеллер на спине,Он упитанный вполне,У него на крыше дом –Это развеселый гном.", "Карлсон"),
    ("какого камня нету в реке?", "Сухого"),
    ("Пожирает всё кругом:Зверя, птицу, лес и дом.Сталь сгрызёт, железо сгложет,Крепкий камень уничтожит,Власть его всего сильней,Даже власти королей».", "Время"),
    ("Кругла, бледна, но не всегда видна.Порой светла, порой темна,На тьму и свет разделена.Всегда одной лишь сторонойВишу я над тобой.Всем хочется пройти по мне,Но это можно лишь во сне.", "Луна"),
    ("Тридцать белых конейНа двух красных холмахРазбегутся, сшибутсяИ снова затихнут впотьмах.", "Зубы"),
    ("Что утром голову теряет, а ночью возвращает?", "Подушка"),
    ("У них нет ни мускулов, ни перьев, ни чешуи, ни костей. Зато у них есть пальцы. Кто они такие?", "Перчатки"),
    ("Ночью приходят, но их не берут, днем потерялись, но их не крадут. Кто они такие?", "Звезды"),
    ("Что спускается, но никогда не разбивается?", "Сумерки"),
    ("Я — страшная кукла, себя сам боюсь. Обычно стою я, под ветром — ложусь. Мне не до игр: и в холод, и в зной стою за оградой. Кто я такой?", "Пугало"),
    ("Темные всадники в вечном полете. Без солнца их нет — нигде не найдете. Кто они такие?", "Тени"),
    ("Я вырос во мраке, сияю я призрачным светом луны. Слез символ, но женщины в тайну мою влюблены.", "Жемчуг"),
    ("Мне ночью отдают приказ, я утром исполняю. Ну что ты злишься на меня и со стола роняешь? Что я такое?", "Будильник"),
    ("Я не живое существо, но родился после смерти чего-то большого и раскаленного. Я способен поглотить все на свете. Я очень темный и существую в месте, где нет гравитации. Что я?", "Чёрная дыра"),
    ("Я не могу причинить тебе боль, но могу оставить шрамы. Я никому не нужен, но у всех бываю. Однако ты единственный, кто может меня видеть. Что я такое?", "Кошмар"),
    ("Ты видишь меня ночью, днем ты всем обо мне рассказываешь. Я возвращаюсь, но всегда выгляжу иначе. Я часто оставляю тебя в темноте. Что я такое?", "Сон"),
    ("Я ничто, и я все. Я совершенная тьма, и я самый яркий свет. Я пустая и наполненная. Я нигде, и я везде. Меня не видят, но за мной наблюдают миллионы. Что я такое?", "Вселенная"),
    ("Я синяя днем и черная ночью; во мне рождаются и умирают. Что я такое?", "Море"),
    ("Я ночью прокрадусь на луг, днем засияет все вокруг! Я утром землю искупаю, а к полудню растаю. Что я такое?", "Утренняя роса"),
    ("Я скрытный, как тень в глубокой ночи, хитрый, но ласковый — если мне что-то нужно. У меня нет хозяев, зато меня любят. Это покажется жестоким, но лишь потому, что ты меня совсем не знаешь. Кто я?", "Кот")
    # Добавьте остальные загадки
]

# Словарь для отслеживания состояния пользователей (игроков)
user_states = {}

# Константы для состояний
STATE_START = "start"
STATE_WAIT_ANSWER = "wait_for_answer"

# Обработчик команды /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton('/start')
    puzzle_button = types.KeyboardButton('/puzzle')
    markup.add(puzzle_button)
    bot.send_message(message.chat.id, "Привет! Я бот с игрой в загадки.", reply_markup=markup)
    user_states[message.chat.id] = STATE_START

# Обработчик команды /puzzle
@bot.message_handler(commands=['puzzle'])
def handle_puzzle(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, "Для начала игры отправьте /puzzle.", reply_markup=markup)
    send_new_riddle(message)

# Функция для отправки новой загадки
def send_new_riddle(message):
    if len(used_riddles) == len(all_riddles):
        bot.send_message(message.chat.id, "Извините, нет доступных загадок.")
        return

    riddle_data = get_random_riddle()
    if riddle_data and riddle_data[0] not in used_riddles:
        загадка, правильный_ответ = riddle_data
        bot.send_message(message.chat.id, "Загадка:\n" + загадка)
        bot.register_next_step_handler(message, check_answer, правильный_ответ)
        user_states[message.chat.id] = (STATE_WAIT_ANSWER, правильный_ответ)
    elif not riddle_data:
        bot.send_message(message.chat.id, "Извините, нет доступных загадок.")

# Функция для проверки ответа на загадку
def check_answer(message, правильный_ответ):
    user_id = message.chat.id
    user_answer = message.text.strip()

    if user_answer.lower() == правильный_ответ.lower():
        bot.send_message(user_id, 'Правильно!')
    else:
        bot.send_message(user_id, f'Неправильно, правильный ответ: {правильный_ответ}')

    used_riddles.add(правильный_ответ)
    send_choice_message(user_id)

# Функция для отправки сообщения с выбором (кнопками)
def send_choice_message(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    new_puzzle_button = types.KeyboardButton('Дать новую загадку?')
    stop_button = types.KeyboardButton('Остановиться')
    markup.add(new_puzzle_button, stop_button)
    bot.send_message(user_id, "Что бы вы хотели сделать?", reply_markup=markup)

# Обработчик для выбора пользователя после ответа
@bot.message_handler(func=lambda message: message.text == 'Дать новую загадку?')
def handle_new_riddle_choice(message):
    send_new_riddle(message)

@bot.message_handler(func=lambda message: message.text == 'Остановиться')
def handle_stop_choice(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, "Спасибо за игру! До свидания!", reply_markup=markup)



















# Запускаем бота
bot.polling()















# @bot.message_handler(commands=['start'])
# def main(message):
#     bot.send_message(message.chat.id, '''Привеееееет
# эта про грамма создана в виде ЭЭЭЭЭЭЭксперемента''')
#     time.sleep(1)
#     bot.send_message(message.chat.id, f'здрасте , {message.from_user.first_name} ')



@bot.message_handler(commands=['TikTok'])
def birthday(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('Жми если у тебя сегодня день рождения!', url='www.googlt.com'))
    bot.reply_to(message, '''ООООО это значит выыыыы????
открой ссылку специльно для тебя снят видео в тик ток''', reply_markup=markup)


















































# @bot.message_handler()
# def answer(message):
#     if message.text.lower() == 'да':
#         ts0()
#         bot.send_message(message.chat.id, 'Отлично')
#     else:
#         bot.send_message(message.chat.id, 'КОГО ТЫ ХОЧЕШЬ ОБМАНУТЬ -_-?')





# @bot.message_handler(commands=['start'])
# def main(message):
#     bot.send_message(message.chat.id, 'привет')

bot.polling(none_stop=True)